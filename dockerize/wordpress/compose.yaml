# use yaml anchors to avoid some duplication
# public-root-path and public-root-volume must be exactly the same!
x-public-root-path: &public-root-path /var/www/html/blog
x-public-root-volume: &public-root-volume wordpress_data:/var/www/html/blog
x-domain: &domain slackerparadise.com
x-email: &email cparsnipson@gmail.com

services:
  mariadb:
    restart: always
    image: mariadb:11.7.1-ubi9-rc
    environment:
      MARIADB_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
      MARIADB_USER_FILE:          /run/secrets/db_user_name
      MARIADB_PASSWORD_FILE:      /run/secrets/db_user_password
      MARIADB_DATABASE_FILE:      /run/secrets/db_name
    volumes:
      - mariadb_data:/var/lib/mysql
    secrets:
      - db_root_password
      - db_user_name
      - db_user_password
      - db_name
    networks:
      - backend

  wordpress:
    image: wordpress:6.7.2-php8.3-fpm
    restart: always
    depends_on:
      - mariadb
    environment:
      WORDPRESS_DB_HOST:          mariadb  # use the id of db container
      WORDPRESS_DB_USER_FILE:     /run/secrets/db_user_name
      WORDPRESS_DB_PASSWORD_FILE: /run/secrets/db_user_password
      WORDPRESS_DB_NAME_FILE:     /run/secrets/db_name
      WORDPRESS_DATA_DIR:         *public-root-path
    # changes the default wordpress public directory from /var/www/html
    working_dir: *public-root-path
    volumes:
      # mountpoint must be exactly the same as the wordpress_data mountpoint
      # in the nginx container
      - *public-root-volume
      - ./wordpress/init.sh:/usr/bin/init.sh
    entrypoint: [ "init.sh" ]
    secrets:
      - db_user_name
      - db_user_password
      - db_name
    networks:
      - backend

  certbot:
    image: certbot/certbot:v3.2.0
    depends_on:
      # nginx needs to be up with the /.well-known/acme-challenge endpoint for
      # certbot to successfully request a certificate. Once the certificate is
      # downloaded, we need to modify the nginx config with ssl info and restart it
      - nginx
    environment:
      CERTBOT_WEBROOT: /var/www/certbot/ # this must be the same mountpoint as certbot_data
      CERTBOT_DRYRUN: 0
      CERTBOT_USE_STAGING: 0
      CERTBOT_EMAIL: *email
      CERTBOT_DOMAIN: *domain
      CERTBOT_LEAVE_CONTAINER_RUNNING: 0
    volumes:
      - certbot_data:/var/www/certbot/:rw
      - certbot_certs:/etc/letsencrypt/:rw
      - ./certbot/init.sh:/usr/bin/init.sh
    entrypoint: [ "init.sh" ]

  nginx:
    image: nginx:1.27.3
    restart: always
    depends_on:
      - mariadb
      - wordpress
    environment:
      NGINX_DOMAIN: *domain
      NGINX_CONF_PATH: /etc/nginx/conf.d
    volumes:
      - nginx_logs:/etc/nginx/logs
      - nginx_config:/etc/nginx/conf.d
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d.orig:ro
      - ./nginx/launch_init.sh:/docker-entrypoint.d/launch_init.sh
      - ./nginx/init.sh:/usr/bin/init.sh
      - *public-root-volume
      - certbot_data:/var/www/certbot/:ro
      - certbot_certs:/etc/nginx/ssl/:ro
    networks:
      - backend
    ports:
      - "80:80"
      - "443:443"

volumes:
  mariadb_data:
    external: false
  wordpress_data:
    external: false
  nginx_config:
    external: false
  nginx_logs:
    external: false
  certbot_data:
    external: false
  certbot_certs:
    external: false

secrets:
  db_root_password:
    file: secrets/db-root-password.txt
  db_user_name:
    file: secrets/db-user-name.txt
  db_user_password:
    file: secrets/db-user-password.txt
  db_name:
    file: secrets/db-name.txt

networks:
  backend:
